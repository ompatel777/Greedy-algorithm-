#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int start;
    int finish;
} Activity;

int compare(const void *a, const void *b) {
    Activity *x = (Activity *)a;
    Activity *y = (Activity *)b;

    if (x->finish < y->finish) {
        return -1;
    } else if (x->finish > y->finish) {
        return 1;
    } else {
        return 0;
    }
}

void activitySelection(int s[], int f[], int n) {
    // Create an array of activities
    Activity activities[n];

    for (int i = 0; i < n; i++) {
        activities[i].start = s[i];
        activities[i].finish = f[i];
    }

    // Sort the activities based on their finish times
    qsort(activities, n, sizeof(Activity), compare);

    // Initialize the selected activities list
    int selected_activities[n];
    int count = 0;

    // Select the first activity
    selected_activities[count++] = 0;

    // Iterate through the sorted activities
    for (int i = 1; i < n; i++) {
        // If the current activity starts after the previous activity ends
        if (activities[i].start >= activities[selected_activities[count - 1]].finish) {
            // Add the current activity to the selected activities list
            selected_activities[count++] = i;
        }
    }

    // Print the selected activities
    printf("Selected activities: ");
    for (int i = 0; i < count; i++) {
        printf("%d ", selected_activities[i]);
    }
    printf("\n");
}

int main() {
    int s[] = {1, 3, 0, 5, 8, 5};
    int f[] = {2, 4, 6, 7, 9, 9};
    int n = sizeof(s) / sizeof(s[0]);

    activitySelection(s, f, n);

    return 0;
}

